contour(xR2, yR2, matrixC)
#set.seed(42)
sizeOmega <- 20
lowerBound <- -1
upperBound <- 1
xR2 <- seq(-20,20,1)
yR2 <- seq(-20,20,1)
R2 <- expand.grid(x = xR2, y = yR2)
temp <- R2$x
R2$x <- R2$y
R2$y <- temp
final <- calcAllC()
library(tidyverse)
library(spatstat)
library(pracma)
library(plyr)
library(plotly)
library(mltools)
library(data.table)
library(htmlwidgets)
calcB2 <- function(X1w, X2w, X3w) {
norm12 = norm(X1w-X2w,"2")
norm13 = norm(X1w-X3w, "2")
norm23 = norm(X2w-X3w, "2")
N = c(norm12, norm13, norm23)
ind <- which.max(N)
if(ind == 1){
B2w = X3w
}else if(ind == 2){
B2w = X2w
}
else{
B2w = X1w
}
return(list("B2w" = B2w, "ind" = ind))
}
calcOrder <- function(X1w, X2w, X3w, B2w, ind){
norm1 = norm(X1w-B2w, "2")
norm2 = norm(X2w-B2w, "2")
norm3 = norm(X3w-B2w, "2")
X3wP <- B2w
if (ind == 1){
if(norm2 >= norm3){
X1wP <- X2w
X2wP <- X3w
}else{
X1wP <- X3w
X2wP <- X2w
}
}else if(ind == 2){
if(norm1 >= norm3){
X1wP <- X1w
X2wP <- X3w
}else{
X1wP <- X3w
X2wP <- X1w
}
}else{
if(norm1 >= norm2){
X1wP <- X1w
X2wP <- X2w
}else{
X1wP <- X2w
X2wP <- X1w
}
}
return(list("X1" = X1wP, "X2" = X2wP, "X3" = X3wP))
}
calcF <- function(R2, B2w, X1wP, X2wP, X3wP){
# calculate F1
# browser()
n <- length(R2$x)
F1ind = numeric()
b <- Norm(X1wP - B2w)
for(i in 1:n){
# browser()
x = as.numeric(R2[i,])
a <- Norm(x - B2w)
if(a >= b){
F1ind <- c(F1ind,i)
}
}
F1 <- R2[F1ind,]
#R2 <- R2[-F1ind,]
# calculate F2
F2ind = numeric()
b <- Norm(X2wP - B2w)
# print(b)
if(n!=0){
for(i in 1:n){
if(!(i %in% F1ind)){
x = as.numeric(R2[i,])
a <- Norm(x - B2w)
if(a >= b){
F2ind <- c(F2ind,i)
}
}
}
}
F2 <- R2[F2ind,]
#R2 <- R2[-F2ind,]
#calculate F3
#n <- length(R2$x)
F3ind = numeric()
b <- Norm(X3wP - B2w)
# print(b)
if(n != 0){
for(i in 1:n){
if(!(i %in% F1ind) && !(i %in% F2ind)){
x = as.numeric(R2[i,])
a <- Norm(x - B2w)
if(a >= b){
F3ind <- c(F3ind,i)
}
}
}
}
F3 <- R2[F3ind,]
#R2 <- R2[-F3ind,]
#calculate F4 (the rest) and F0 (the empty set)
F4 <- R2
return(list("F1ind" = F1ind, "F2ind" = F2ind, "F3ind" = F3ind))
}
calcProb <- function(sizeOmega, ind_x, ind, allF){
count = 0
for(i in 1:sizeOmega){
Fi_ind <- allF[ind,i]
# print(x)
# print(nrow(merge(x,Fi)))
Fi_ind = unlist(Fi_ind)
if(ind_x %in% Fi_ind){
count = count + 1
}
}
# print(count/sizeOmega)
return(count/sizeOmega)
}
funcC <- function(ind_x, sizeOmega, allF, empCDF){
res = 0
for(ind in 1:3){
# print(res)
res = res + calcProb(sizeOmega, ind_x, ind, allF)*(empCDF[ind_x]+(i-1))
}
# print(res)
return(res/4)
}
calcAllC <- function(){
allF = replicate(sizeOmega, calcAllF())
n <- length(R2$x)
Cxy <- numeric(n)
dt <- data.table(x = rnorm(100,-5,5), y = rnorm(100,-5,5))
empCDF <- empirical_cdf(dt, ubounds=CJ(x = xR2, y = yR2))
empCDF <- empCDF$CDF
for(i in 1:n){
Cxy[i] <- funcC(i, sizeOmega, allF, empCDF)
}
final <- R2
final$Cxy <- Cxy
return(final)
}
calcAllF <- function(){
X1w = runif(2,lowerBound, upperBound)
X2w = runif(2,lowerBound, upperBound)
X3w = runif(2,lowerBound, upperBound)
ret <- calcB2(X1w,X2w,X3w)
B2w <- ret$B2w
ind <- ret$ind
ret <- calcOrder(X1w, X2w, X3w, B2w, ind)
X1wP <- ret$X1
X2wP <- ret$X2
X3wP <- ret$X3
scriptF <- calcF(R2, B2w, X1wP, X2wP, X3wP)
return (scriptF)
}
#set.seed(42)
sizeOmega <- 20
lowerBound <- -1
upperBound <- 1
xR2 <- seq(-20,20,1)
yR2 <- seq(-20,20,1)
R2 <- expand.grid(x = xR2, y = yR2)
temp <- R2$x
R2$x <- R2$y
R2$y <- temp
final <- calcAllC()
#set.seed(42)
sizeOmega <- 20
lowerBound <- -1
upperBound <- 1
xR2 <- seq(-20,20,1)
yR2 <- seq(-20,20,1)
R2 <- expand.grid(x = xR2, y = yR2)
temp <- R2$x
R2$x <- R2$y
R2$y <- temp
final <- calcAllC()
calcAllF <- function(){
X1w = runif(2,lowerBound, upperBound)
X2w = runif(2,lowerBound, upperBound)
X3w = runif(2,lowerBound, upperBound)
ret <- calcB2(X1w,X2w,X3w)
B2w <- ret$B2w
ind <- ret$ind
ret <- calcOrder(X1w, X2w, X3w, B2w, ind)
X1wP <- ret$X1
X2wP <- ret$X2
X3wP <- ret$X3
scriptF <- calcF(R2, B2w, X1wP, X2wP, X3wP)
return (scriptF)
}
calcAllC <- function(){
allF = replicate(sizeOmega, calcAllF())
n <- length(R2$x)
Cxy <- numeric(n)
dt <- data.table(x = rnorm(100,-5,5), y = rnorm(100,-5,5))
empCDF <- empirical_cdf(dt, ubounds=CJ(x = xR2, y = yR2))
empCDF <- empCDF$CDF
for(i in 1:n){
Cxy[i] <- funcC(i, sizeOmega, allF, empCDF)
}
final <- R2
final$Cxy <- Cxy
return(final)
}
funcC <- function(ind_x, sizeOmega, allF, empCDF){
res = 0
for(ind in 1:3){
# print(res)
res = res + calcProb(sizeOmega, ind_x, ind, allF)*(empCDF[ind_x]+(i-1))
}
# print(res)
return(res/4)
}
#set.seed(42)
sizeOmega <- 20
lowerBound <- -1
upperBound <- 1
xR2 <- seq(-20,20,1)
yR2 <- seq(-20,20,1)
R2 <- expand.grid(x = xR2, y = yR2)
temp <- R2$x
R2$x <- R2$y
R2$y <- temp
final <- calcAllC()
funcC <- function(ind_x, sizeOmega, allF, empCDF){
res = 0
for(ind in 1:3){
# print(res)
res = res + calcProb(sizeOmega, ind_x, ind, allF)*(empCDF[ind_x]+(ind-1))
}
# print(res)
return(res/4)
}
calcAllC <- function(){
allF = replicate(sizeOmega, calcAllF())
n <- length(R2$x)
Cxy <- numeric(n)
dt <- data.table(x = rnorm(100,-5,5), y = rnorm(100,-5,5))
empCDF <- empirical_cdf(dt, ubounds=CJ(x = xR2, y = yR2))
empCDF <- empCDF$CDF
for(i in 1:n){
Cxy[i] <- funcC(i, sizeOmega, allF, empCDF)
}
final <- R2
final$Cxy <- Cxy
return(final)
}
#set.seed(42)
sizeOmega <- 20
lowerBound <- -1
upperBound <- 1
xR2 <- seq(-20,20,1)
yR2 <- seq(-20,20,1)
R2 <- expand.grid(x = xR2, y = yR2)
temp <- R2$x
R2$x <- R2$y
R2$y <- temp
final <- calcAllC()
matrixC <- matrix(final$Cxy, nrow= sqrt(length(final$Cxy)),byrow=FALSE)
UnifV1 <- plot_ly(x = xR2, y = yR2, z = matrixC, type = "surface")
#UnifV1
#jpeg("Unif_-1_1-20_40_Om40.jpeg")
contour(xR2, yR2, matrixC)
#persp(xR2, yR2, matrixC,col = "springgreen", shade = 0.5, xlab = "x_1", ylab = "x_2", zlab = "C(x)")
#dev.off()
persp(xR2, yR2, matrixC,col = "springgreen", shade = 0.5, xlab = "x_1", ylab = "x_2", zlab = "C(x)")
UnifV1
calcAllF <- function(){
X1w = runif(2,lowerBound, upperBound)
X2w = runif(2,lowerBound, upperBound)
X3w = runif(2,lowerBound, upperBound)
ret <- calcB2(X1w,X2w,X3w)
B2w <- ret$B2w
ind <- ret$ind
ret <- calcOrder(X1w, X2w, X3w, B2w, ind)
X1wP <- ret$X1
X2wP <- ret$X2
X3wP <- ret$X3
scriptF <- calcF(R2, B2w, X1wP, X2wP, X3wP)
return (scriptF)
}
